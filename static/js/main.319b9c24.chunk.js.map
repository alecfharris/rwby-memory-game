{"version":3,"sources":["components/Wrapper/index.js","components/EmblemCard/index.js","components/CardContainerFlex/index.js","components/Header/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","EmblemCard","onClick","checkGuess","id","alt","name","src","image","CardContainerFlex","Header","Fragment","mainText","score","topScore","Footer","App","state","emblems","guessedEmblems","_this","correctGuess","setState","correctGuessBool","map","emblem","push","shuffle","temporaryValue","randomIndex","array","currentIndex","length","Math","floor","random","_this2","this","components_Wrapper","components_Header","components_CardContainerFlex","components_EmblemCard","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.319b9c24.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction EmblemCard(props) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"img-container\" onClick={() => props.checkGuess(props.id)}>\r\n                <img alt={props.name} src={props.image} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmblemCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CardContainerFlex(props) {\r\n    return (\r\n    <div className=\"card-container-flex\">\r\n    <div className=\"main\">{props.children}</div>\r\n    </div>)\r\n}\r\n\r\nexport default CardContainerFlex;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props)  {\r\n        return (\r\n            <React.Fragment>\r\n            <div id=\"header\">\r\n            <div id=\"header-flex\">\r\n            <div className=\"header-flex-item\" id=\"header-title\">RWBY Memory Game</div>\r\n            <div className=\"header-flex-item\" id=\"header-main-text\">{props.mainText}</div>\r\n            <div className=\"header-flex-item\" id=\"header-score\">Score: {props.score} | Top Score {props.topScore}</div>\r\n            </div>\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <footer id=\"footer\"> \r\n            <div id=\"footer-top\"> {null}\r\n            </div>\r\n            <div id=\"footer-bottom\"> {null}\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport EmblemCard from \"./components/EmblemCard\";\nimport CardContainerFlex from \"./components/CardContainerFlex\";\nimport Header from \"./components/Header\"\nimport Footer from \"./components/Footer\"\nimport './App.css';\nimport emblems from './emblems.json';\n\nclass App extends Component {\n  state = {\n    emblems,\n    guessedEmblems: [],\n    score: 0,\n    topScore: 0,\n    mainText: \"Click an image to begin!\"\n  };\n  checkGuess = id => {\n    // Checks guess and then updates state\n    const correctGuess = this.correctGuess(id);\n    if (correctGuess === true) {\n        this.setState({ score: this.state.score + 1, mainText: \"Correct guess!\" })\n        if (this.state.score >= this.state.topScore) {\n            this.setState({ topScore: this.state.score +1 })\n        }\n    }\n    else {\n      this.setState({ guessedEmblems: [], score: 0, mainText: \"Incorrect guess!\" });\n    }\n}\n\ncorrectGuess = (id) => {\n    let correctGuessBool = true;\n    let guessedEmblems = this.state.guessedEmblems;\n    // Checks to see if the id matches already guessed ids and then returns false if it does\n    guessedEmblems.map(emblem => {\n        if (emblem === id) {\n            correctGuessBool = false;\n            return correctGuessBool;\n        }\n    })\n    // Makes sure only to push id to array if guess was correct to prevent the game being unable to reset on a false guess\n    if (correctGuessBool === true){\n      guessedEmblems.push(id);\n      this.setState({ guessedEmblems })\n    }\n    this.shuffle();\n    return correctGuessBool;\n}\n\nshuffle= () =>{\n  let array = this.state.emblems;\n  let currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  this.setState({emblems: array});\n}\n\n\n  render() {\n    return (\n      <Wrapper>\n        <Header \n        mainText={this.state.mainText}\n        score={this.state.score}\n        topScore={this.state.topScore}\n        />\n        <CardContainerFlex>\n          {this.state.emblems.map(emblem => (\n            <EmblemCard\n              id={emblem.id}\n              key={emblem.id}\n              name={emblem.name}\n              image={emblem.image}\n              checkGuess={this.checkGuess}\n            />\n          ))}\n        </CardContainerFlex>\n        <Footer />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}